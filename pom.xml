<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- 基本信息 -->
    <!-- 所使用的object model版本，为了确保稳定的使用，这个元素是强制性的。除非maven开发者升级模板，否则不需要修改 -->
    <modelVersion>4.0.0</modelVersion>
    <!-- 表示项目的展现名，在maven生成的文档中使用 -->
    <name>SpringBoot Learning</name>
    <!-- 表示项目的描述，在maven生成的文档中使用 -->
    <description>学习SpringBoot的练习Project</description>
    <!-- artifact打包的方式，可以为：pom , jar , maven-plugin , ejb , war , ear , rar , par。默认为jar。这个不仅表示项目最终产生何种后缀的文件，也表示build过程使用什么样的lifecycle。 -->
    <packaging>pom</packaging>

    <!-- 项目说明：这里作为聚合工程的父工程 -->
    <!-- 是项目创建团体或组织的唯一标志符，通常是域名倒写，如groupId  org.apache.maven.plugins就是为所有maven插件预留的 -->
    <groupId>com.easonwy</groupId>
    <!--是项目artifact唯一的基地址名(坐标)-->
    <artifactId>springboot-learning</artifactId>
    <!--artifact的版本，通常能看见为类似0.0.1-SNAPSHOT，其中SNAPSHOT表示项目开发中，为开发版本, RELEASE表示为已经发布的版本-->
    <version>0.0.1-SNAPSHOT</version>
    <!-- groupId:artifactId:version唯一确定了一个artifact -->

    <!-- 继承说明：这里继承SpringBoot提供的父工程 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.5.RELEASE</version>
        <relativePath />
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring-boot.version>2.3.5.RELEASE</spring-boot.version>
        <hutool.version>5.7.17</hutool.version>
        <lombok.version>1.18.22</lombok.version>
    </properties>


    <!-- 模块说明：这里声明多个子模块 -->
    <modules>
        <!-- 基础 – 入门篇 -->
        <!-- Spring Boot 之 HelloWorld 详解 -->
		<module>springboot-helloworld</module>
<!--		&lt;!&ndash; Spring Boot 之配置文件详解 &ndash;&gt;-->
<!--		<module>springboot-properties</module>-->
<!--		&lt;!&ndash; Spring Boot 之配置文件详解 &ndash;&gt;-->
<!--		<module>springboot-multimodule</module>-->

<!--		&lt;!&ndash; 基础 - Web 业务开发篇 &ndash;&gt;-->
<!--		&lt;!&ndash; Spring Boot 实现 Restful 服务，基于 HTTP / JSON 传输 &ndash;&gt;-->
<!--		<module>springboot-restful</module>-->
<!--		&lt;!&ndash; SpringBoot 实现MvcWeb页面 &ndash;&gt;-->
<!--		<module>springboot-mvc</module>-->
<!--		&lt;!&ndash; Spring Boot 集成 FreeMarker &ndash;&gt;-->
<!--		<module>springboot-freemarker</module>-->
<!--		&lt;!&ndash; Spring Boot HTTP over JSON 的错误码异常处理 &ndash;&gt;-->
<!--		<module>springboot-validation-over-json</module>-->
<!--		-->
<!--		&lt;!&ndash; 基础 - Unit测试篇 &ndash;&gt;-->
<!--		<module>springboot-test</module>-->

		<!-- 基础 - 缓存篇 -->
		<module>springboot-redis</module>

        <!--		&lt;!&ndash; 基础 – 数据存储篇 &ndash;&gt;-->
<!--		&lt;!&ndash; Spring Boot jdbc&ndash;&gt;-->
<!--		<module>springboot-jdbc</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 JPA 的完整 Web 案例 &ndash;&gt;-->
<!--		<module>springboot-jpa</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 Mybatis 的完整 Web 案例 &ndash;&gt;-->
<!--		<module>springboot-mybatis</module>-->
<!--		&lt;!&ndash; Spring Boot 整合Druid连接池 &ndash;&gt;-->
<!--		<module>springboot-druid</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 Mybatis Annotation 注解案例 &ndash;&gt;-->
<!--		<module>springboot-mybatis-annotation</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 Mybatis 实现 Druid 多数据源配置 &ndash;&gt;-->
<!--		<module>springboot-mybatis-mutil-datasource</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 Mybatis generator 插件生成Mapper/DAO/Pojo &ndash;&gt;-->
<!--		<module>springboot-mybatis-generator</module>-->

<!--		&lt;!&ndash; 基础 – 数据缓存篇 &ndash;&gt;-->
<!--		&lt;!&ndash; Spring Boot 整合 Redis 实现缓存 &ndash;&gt;-->
<!--		<module>springboot-mybatis-redis</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 Redis 实现缓存 &ndash;&gt;-->
<!--		<module>springboot-mybatis-memocached</module>-->

<!--		&lt;!&ndash; 其他篇 &ndash;&gt;-->
<!--		&lt;!&ndash; Spring Boot 整合 Dubbo/ZooKeeper 详解 SOA 案例 &ndash;&gt;-->
<!--		<module>springboot-dubbo-server</module>-->
<!--		<module>springboot-dubbo-client</module>-->
<!--		&lt;!&ndash; Spring Boot 整合 Elasticsearch &ndash;&gt;-->
<!--		<module>springboot-elasticsearch</module>-->
<!--		&lt;!&ndash; SpringBoot 整合Rest/Mvc/Angular &ndash;&gt;-->
<!--		<module>springboot-angular</module>-->
<!--		&lt;!&ndash; SpringBoot 整合Rest/Mvc/react &ndash;&gt;-->
<!--		<module>springboot-react</module>-->
<!--		&lt;!&ndash; SpringBoot 整合Rest/Mvc/vue &ndash;&gt;-->
<!--		<module>springboot-vue</module>-->
    </modules>

    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun Repository</name>
            <url>https://maven.aliyun.com/repository/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <!-- 版本说明：这里统一管理依赖的版本号 -->
    <!-- 该标签只用来控制版本，不能将依赖引入 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!--<plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
             指定JDK编译版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- 打包跳过测试 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
            <!-- 避免font文件的二进制文件格式压缩破坏 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>woff</nonFilteredFileExtension>
                        <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
                        <nonFilteredFileExtension>eot</nonFilteredFileExtension>
                        <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
                        <nonFilteredFileExtension>svg</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.json</include>
                    <include>**/*.ftl</include>
                </includes>
            </resource>
        </resources>
    </build>

</project>
